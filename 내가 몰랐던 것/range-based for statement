문법 https://boycoding.tistory.com/210 출처
******************************
for(element_declaration :array) // element_declaration = 변수 선언
statement;

******************************

element_declaration과 array의 요소가 같아야 형변환이 발생하지 않고 최상의 결과를 기대할 수 있다.

위와 같은 이유로 auto를 사용하여 자료형을 추론하도록 하는 것이 이상적임.

ex)
int num[] = {1,2,3,4,5,6,7,8,9};
for(auto i: num){
    cout<<num<<"\n";
}
**********************************


array의 요소가 element_declaration로 단순 복사되기 떄문에 많은 비용(공간, 시간)이 필요로 한다.
이를 해결하기 위해 함수 인자와 마찬가지로 참조가 가능하다.
읽기 전용으로 사용하기 위해서는 element_declaration을 const로 만드는게 좋다고 한다.
ex)

int array[5] = { 9, 7, 5, 3, 1 };
for (const auto& element: array) // element is a const reference to the currently iterated array element std::cout << element << ' ';
    cout<<"element<<"\n";
출처: https://boycoding.tistory.com/210 [소년코딩]


*****************************************

포인터로 변환된 배열에서 rage-based for roop는 사용할 수 없다(배열의 크기 = 범위를 알지 못하기 때문)
int sumArray(int array[]) // array is a pointer 
{ 
    int sum = 0; for (const auto& number : array) // compile error, the size of array isn't known
    sum += number; return sum;
}

출처: https://boycoding.tistory.com/210 [소년코딩]